// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feed.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feed (id, name, url, user_id, created_at, updated_at)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING id, name, url, user_id, updated_at, created_at
`

type CreateFeedParams struct {
	ID        uuid.UUID
	Name      string
	Url       string
	UserID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.Name,
		arg.Url,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listAllFeeds = `-- name: ListAllFeeds :many
SELECT 
    feed.id,
    feed.name AS feed_name,
    feed.url,
    feed.user_id,
    users.name AS user_name,
    feed.created_at,
    feed.updated_at
FROM feed
JOIN users ON feed.user_id = users.id
`

type ListAllFeedsRow struct {
	ID        uuid.UUID
	FeedName  string
	Url       string
	UserID    uuid.UUID
	UserName  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) ListAllFeeds(ctx context.Context) ([]ListAllFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAllFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllFeedsRow
	for rows.Next() {
		var i ListAllFeedsRow
		if err := rows.Scan(
			&i.ID,
			&i.FeedName,
			&i.Url,
			&i.UserID,
			&i.UserName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
